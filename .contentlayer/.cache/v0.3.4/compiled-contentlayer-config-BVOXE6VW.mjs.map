{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType } from 'contentlayer/source-files'\nimport { makeSource } from 'contentlayer/source-remote-files';\nimport { spawn } from 'node:child_process';\n\nconst BLOG_DIRECTORY = 'blogs';\nconst SYNC_INTERVAL = 1000 * 60;\n\nexport const Post = defineDocumentType(() => ({\n    name: 'Post',\n    filePathPattern: `**/*.mdx`,\n    contentType: 'mdx',\n    fields: {\n        title: { type: 'string', required: true },\n        date: { type: 'date', required: true },\n        tags: { type: 'list', of: { type: 'string' }, default: [] },\n        lastmod: { type: 'date' },\n        draft: { type: 'boolean' },\n        summary: { type: 'string' },\n        images: { type: 'list', of: { type: 'string' } },\n        authors: { type: 'list', of: { type: 'string' } },\n        layout: { type: 'string' },\n        bibliography: { type: 'string' },\n        canonicalUrl: { type: 'string' },\n      },\n    computedFields: {\n        url: {\n          type: 'string',\n          resolve: (doc) => doc._raw.flattenedPath,\n        },\n        slug: {\n          type: 'string',\n          resolve: (doc) => doc._raw.sourceFileName.split('.')[0],\n        },\n      },\n\n}))\n\nconst syncContentFromGit = async ({ contentDir, gitTag }) => {\n  const startTime = Date.now();\n  console.log(`Syncing content files from git (${gitTag}) to ${contentDir}`);\n  console.log('\\n')\n  console.log(`\"gitTag: \" ${gitTag}`)  \n console.log(`\"contentDir:\" ${contentDir}`)\n\n  const syncRun = async () => {\n    const gitUrl = \"https://github.com/ZorbaBuda/starter-blog.git\";\n    await runBashCommand(`\n    \n      if [ -d  \"${contentDir}\" ];\n        then\n          cd \"${contentDir}\"; git pull;\n        else\n          git clone --depth 1 --single-branch ${gitUrl} ${contentDir};\n      fi\n    `);\n  };\n\n \n\n  let wasCancelled = false;\n  let syncInterval;\n\n  const syncLoop = async () => {\n    console.log(\"Syncing content files from git\");\n\n    await syncRun();\n\n    if (wasCancelled) return;\n\n    syncInterval = setTimeout(syncLoop, 1000 * 60);\n  };\n\n  // Block until the first sync is done\n  await syncLoop();\n\n  return () => {\n    wasCancelled = true;\n    clearTimeout(syncInterval);\n  };\n};\n\n// const syncContentFromGit = async ({\n//     contentDir,\n//     gitTag,\n//   }) => {\n//     const startTime = Date.now();\n//     console.log(`Syncing content files from git (${gitTag}) to ${contentDir}`);\n  \n//     const syncRun = async () => {\n//       const gitUrl = 'https://github.com/ZorbaBuda/blog-github-mdx.git';\n//       console.log(gitUrl)\n//       await runBashCommand(`\n//         #! /usr/bin/env bash\n  \n//         sync_lock_file=\"${contentDir}/.sync.lock\"\n  \n//         function contentlayer_sync_run () {\n//           block_if_locked;\n  \n//           mkdir -p ${contentDir};\n//           touch $sync_lock_file;\n  \n//           if [ -d \"${contentDir}/.git\" ];\n//             then\n//               cd \"${contentDir}\";\n//               git fetch --quiet --depth=1 origin ${gitTag};\n//               git checkout --quiet FETCH_HEAD;\n//             else\n//               git init --quiet ${contentDir};\n//               cd ${contentDir};\n//               git remote add origin ${gitUrl};\n//               git config core.sparsecheckout true;\n//               git config advice.detachedHead false;\n//               echo \"${BLOG_DIRECTORY}/*\" >> .git/info/sparse-checkout;\n//               git checkout --quiet -b ${gitTag};\n//               git fetch --quiet --depth=1 origin ${gitTag};\n//               git checkout --quiet FETCH_HEAD;\n//           fi\n  \n//           rm $sync_lock_file;\n//         }\n  \n//         function block_if_locked () {\n//           if [ -f \"$sync_lock_file\" ];\n//             then\n//               while [ -f \"$sync_lock_file\" ]; do sleep 1; done;\n//               exit 0;\n//           fi\n//         }\n  \n//         contentlayer_sync_run\n//       `);\n//     };\n  \n//     let wasCancelled = false;\n//     let syncInterval;\n  \n//     const syncLoop = async () => {\n//       await syncRun();\n  \n//       if (wasCancelled) return;\n  \n//       syncInterval = setTimeout(syncLoop, SYNC_INTERVAL); // sync every minute\n//     };\n  \n//     // Block until the first sync is done\n//     await syncLoop();\n  \n//     const initialSyncDuration = ((Date.now() - startTime) / 1000).toPrecision(2);\n//     console.log(\n//       `Initial sync of content files from git took ${initialSyncDuration}s (still syncing every minute...)`\n//     );\n  \n//     return () => {\n//       wasCancelled = true;\n//       clearTimeout(syncInterval);\n//     };\n//   };\n  \n  const runBashCommand = (command) =>\n    new Promise((resolve, reject) => {\n      const child = spawn(command, [], { shell: `${process.env.SHELL_GIT_BASH}` });\n  \n      const logMessages = [];\n  \n      child.stdout.setEncoding('utf8');\n      child.stdout.on('data', (data) => {\n        logMessages.push(data);\n        process.stdout.write(data);\n      });\n  \n      child.stderr.setEncoding('utf8');\n      child.stderr.on('data', (data) => {\n        logMessages.push(data);\n        process.stderr.write(data);\n      });\n  \n      child.on('close', function (code) {\n        if (code === 0) {\n          resolve(void 0);\n        } else {\n          const logStr = logMessages.join('\\n');\n          \n          reject(\n            new Error(`Command failed with exit code ${code}:\\n\\n${logStr}`)\n          );\n        }\n      });\n  });\n\nexport default makeSource((sourceKey = 'main') => (\n \n    { \n        syncFiles: (contentDir) =>\n        syncContentFromGit({ contentDir, gitTag: sourceKey }),\n        // contentDirPath: `blog-${sourceKey}`,\n        contentDirPath: `blogs`,\n        // contentDirInclude: [BLOG_DIRECTORY],\n        documentTypes: [Post],\n        disableImportAliasWarning: true,\n       \n    }\n))\n"],
  "mappings": "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",
  "names": []
}
